generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Session {
//   id     String @id @default(cuid())
//   userId String

//   //relations
//   user User @relation(fields: [userId], references: [id])
// }

model User {
  id       String    @id @default(cuid())
  name     String
  surname  String
  email    String    @unique
  password String
  role     Role
}

enum Role {
  admin
  manager
  boss
  default
}

model Employee {
  id              String   @id @default(cuid())
  name            String
  surname         String
  dateOfBirth     DateTime
  address         String
  telephoneNumber String
  position        Position
  photoPath       String

  //relations
  boss         Train[]    @relation("boss")
  driver       Train[]    @relation("driver")
  driverHelper Train[]    @relation("driverHelper")
  conductor1   Carriage[] @relation("conductor1")
  conductor2   Carriage[] @relation("conductor2")
}

enum Position {
  conductor
  driver
  driverHelper
}


model Train {
  id             String @id @default(cuid())
  routeId        String
  bossId         String
  ticketsLimit   Int
  driverId       String
  driverHelperId String

  //flag
  // departure time
  //relations
  route        Route      @relation(fields: [routeId], references: [id])
  boss         Employee   @relation("boss", fields: [bossId], references: [id])
  driver       Employee   @relation("driver", fields: [driverId], references: [id])
  driverHelper Employee   @relation("driverHelper", fields: [driverHelperId], references: [id])
  carriage     Carriage[]
  ticket       Ticket[]
}

model Route {
  id            String   @id @default(cuid())
  arrivalTime   DateTime
  departureTime DateTime
  train         Train[]
}

model Carriage {
  id           String       @id @default(cuid())
  trainId      String
  type         CarriageType
  conductor1Id String
  conductor2Id String

  //relations
  train      Train    @relation(fields: [trainId], references: [id])
  conductor1 Employee @relation("conductor1", fields: [conductor1Id], references: [id])
  conductor2 Employee @relation("conductor2", fields: [conductor2Id], references: [id])
  ticket     Ticket[]
}

enum CarriageType {
  suitcase
  backpack
}

model Ticket {
  id                  String   @id @default(cuid())
  seat                Int      @unique @default(autoincrement())
  carriageId          String
  trainId             String
  startStationId      String
  endStationId        String
  state               State
  dateTimeOfOperation DateTime @updatedAt

  //relations
  carriage     Carriage @relation(fields: [carriageId], references: [id])
  train        Train    @relation(fields: [trainId], references: [id])
  startStation Station  @relation("startStations", fields: [startStationId], references: [id])
  endStation   Station  @relation("endStations", fields: [endStationId], references: [id])
}

enum State {
  booked
  bought
}

model Price {
  id             String       @id @default(cuid())
  startStationId String
  endStationId   String
  trainType      TrainType
  carriageType   CarriageType
  price          Int

  //relations
  startStation Station @relation("priceStartStations", fields: [startStationId], references: [id])
  endStation   Station @relation("priceEndStations", fields: [endStationId], references: [id])
}

enum TrainType {
  fast
  regional
  longDistance
}

model Station {
  id   String @id @default(cuid())
  name String

  //relations
  priceStartStations Price[]  @relation("priceStartStations")
  priceEndStations   Price[]  @relation("priceEndStations")
  startStations      Ticket[] @relation("startStations")
  endStations        Ticket[] @relation("endStations")
}
