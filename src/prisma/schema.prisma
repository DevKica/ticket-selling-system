generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../../src/resource/dto"
  outputToNestJsResourceStructure = "true"
}

model User {
  id       String   @id @default(cuid())
  name     String
  surname  String
  email    String   @unique
  password String
  role     Role     @default(default)
  blocked  Boolean  @default(false)
  //relations
  Train    Train[]
  Ticket   Ticket[]
}

enum Role {
  admin
  manager
  boss
  default
}

model Employee {
  id              String     @id @default(cuid())
  name            String
  surname         String
  dateOfBirth     DateTime
  address         String
  telephoneNumber String
  position        Position
  photoPath       String
  //relations
  driver          Train[]    @relation("driver")
  driverHelper    Train[]    @relation("driverHelper")
  conductor1      Carriage[] @relation("conductor1")
  conductor2      Carriage[] @relation("conductor2")
}

enum Position {
  conductor
  driver
}

model Train {
  id             String     @id @default(cuid())
  routeId        String
  bossId         String
  driverId       String
  driverHelperId String
  type           TrainType
  //relations
  route          Route      @relation(fields: [routeId], references: [id],onDelete:SetNull)
  boss           User       @relation(fields: [bossId], references: [id],onDelete:SetNull)
  driver         Employee   @relation("driver", fields: [driverId], references: [id],onDelete:SetNull)
  driverHelper   Employee   @relation("driverHelper", fields: [driverHelperId], references: [id],onDelete:SetNull)
  carriage       Carriage[]
  ticket         Ticket[]
}

enum TrainType {
  highSpeed
  passenger
  regional
}

model Route {
  id             String   @id @default(cuid())
  arrivalTime    DateTime
  departureTime  DateTime
  startStationId String
  endStationId   String
  //relations
  startStation   Station  @relation("routeStartStations", fields: [startStationId], references: [id], onDelete: Cascade)
  endStation     Station  @relation("routeEndStations", fields: [endStationId], references: [id], onDelete: Cascade)
  train          Train[]
}

model Carriage {
  id            String       @id @default(cuid())
  numberOfSeats Int
  type          CarriageType
  trainId       String
  conductor1Id  String
  conductor2Id  String
  //relations
  train         Train        @relation(fields: [trainId], references: [id])
  conductor1    Employee     @relation("conductor1", fields: [conductor1Id], references: [id],onDelete:SetNull)
  conductor2    Employee     @relation("conductor2", fields: [conductor2Id], references: [id],onDelete:SetNull)
  ticket        Ticket[]
}

enum CarriageType {
  regular
  comfort
}

model Ticket {
  id              String   @id @default(cuid())
  seat            Int      @unique @default(autoincrement())
  userId          String
  trainId         String
  carriageId      String
  startStationId  String
  endStationId    String
  state           State
  timeOfOperation DateTime @updatedAt
  //relations
  user            User     @relation(fields: [userId], references: [id],onDelete:Cascade)
  train           Train    @relation(fields: [trainId], references: [id],onDelete:Cascade)
  carriage        Carriage @relation(fields: [carriageId], references: [id],onDelete:Cascade)
  startStation    Station  @relation("startStations", fields: [startStationId], references: [id], onDelete: SetNull)
  endStation      Station  @relation("endStations", fields: [endStationId], references: [id], onDelete: SetNull)
}

enum State {
  booked
  bought
}

model Price {
  id             String @id @default(cuid())
  startStationId String
  endStationId   String
}

model Station {
  id                 String   @id @default(cuid())
  name               String
  //relations  
  routeStartStations Route[]  @relation("routeStartStations")
  routeEndStations   Route[]  @relation("routeEndStations")
  startStations      Ticket[] @relation("startStations")
  endStations        Ticket[] @relation("endStations")
}
